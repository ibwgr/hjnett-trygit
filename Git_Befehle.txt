Allgemeine Linux-Konsolenbefehle:

mkdir verzeichnisname  ->Verzeichnis erstellen
touch datei.txt        ->Datei anlegen
vi datei.txt           ->Datei edieren
i                      ->Text kann eingegeben werden
Esc -> :wq -> Enter    ->Editor speichern und verlassen
Ecc -> :q! -> Enter    ->Editor verlassen ohne speichern
:q   (Quit)
$HOME                  ->Home-Verzeichnis wird ausgegeben

Konfiguration:

Externes Diff- und Mergetool einbinden (P4Mergetool):
git config --global merge.tool p4merge
git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
git config --global diff.tool p4merge
git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"

~/.gitconfig -> Konfiguration prüfen
cat .git/config      -> Konfiguration des Repos
git config --list

Bearbeitung:

git init   -->wird im aktuellen Verzeichniss ein neues Repository angelegt

git remote add origin https://github.com/ibwgr/hjnett-trygit.git -> Verbindung zu github mit Name origin auf https://github.com/ibwgr/hjnett-trygit.git hinzufügen

git add <Dateiname>  -->wird eine Datei in den Commit aufgenomen ( erst in git Stange)

git add .  --> alle geänderten Dateien werden in den Stange bereich aufgenommen. 

git commit -m "hier kommt ein Kommentar"  -->werden die Dateien in das Repository lokal aufgenommen.

git commit --all  --> Mit diesem Befehl kann man sich den add Befehl sparen alle Änderungen werden direkt ins Repository übernommen

git status   -->werden alle Aenderungen seit dem letzten commit angezeigt.(Workspace und Stage-Bereich)

git status --short  --> eine Verkleinerte Anzeige.

git log  --> History vom Repository lokal, wird angezeigt.

git log -3  --> werden nur die letzten 3 Einträge angezeigt. 

git .gitignore  --> Datei .gitignor im Root Verzeichnis anlegen. In die Datei die Dateinamen der zu ignorierenden Dateien eintragen

git rm <Dateiname> --> Mit dem rm Befehl müssen in git die gelöschten Dateien bekannt gemacht werden.

git push --set-upstream origin branchnett --> Upstream-Pfad für lokalen Branch definieren und Änderungen vom lokalen Repository(master) ins remote Repository(origin) aufnehmen.

git push -u origin master  --> Upstream-Pfad für lokalen Branch definieren und Änderungen vom lokalen Repository(master) ins remote Repository(origin) aufnehmen.

git pull  --> Änderungen vom remote Repository auf das lokale Repository herunter ziehen.

git reset <Dateiname>  --> Unstage Dateien, die noch nicht commitet sind.

git reset HAED . --> alle Dateien im Stage Bereich werden zurück genommen.

git diff <hashNr erste 7 zeichen> <hashNr erste 7 zeichen> --> Vergleicht die zwei Dateien auf unterschiede.

git diff --staged -->  Zeigt Unterschiede zwischen staging Area und letztem Commit (HEAD)

git diff HEAD~2 HEAD -- main.c  --> Differenz des Files main.c von Commit-Minus 2 zu aktuellem Commit(HEAD) 

git branch <Branch Name>  --> Neuen Branch anlegen.

git brauch <Branch Name> <hashNr> --> Brach zweigt von der Angegebenen hashNr ab.

git branch -d <Branch Name> --> Abgeschlossen Branch löschen.

git branch -D <Branch Name> --> Offenen Branch löschen.

git branch <Branch Name> <HashNr> --> Kann ein gelöschter Branch wieder hergestellt werden.

git reflog --> Kann die HashNr. aus dem lokalen reflog ausgelesen werden.

git merge <Branch Name> --> Einen Banch wieder mit Master zusammen führen. Dazu muss man im Master Branch sein.

git checkout <Banch Name> -->wechselt in den neuen Branch.

git checkout -b <Brach Name> -->erzeugt einen neuen Brach und wechselt auch den Zweig.

git stash --> Mit diesem Befehl können Änderungen vom Workspace zwischen gespeicher werden ohne zu adden. 

git stash list --> anschauen was zwischen gespeichert ist.

git stash pop --> Änderungen aus zwischen Speicher zurück hohlen.

git revert <commit-hash-nr>  --> Commit mit <commit-hash-nr> wird rückgängig gemacht

git fetch origin master  --> der Remote-Track-Branch wir aus dem Repository(origin) Branch(master) lokal aktualisiert

git reset ibw.txt  --> Gegenteil(unstage) von git add ibw.txt

git reset --soft HEAD~1  --> der History wird auf den letzten Commit (HEAD minus 1) zurückgesetzt und die Änderungen die darin enthalten waren erscheinen im Stage-Bereich

git reset --hard HEAD~2 --> Die letzten beiden Commits waren für die Katze. Ich möchte deren Änderungen löschen.

git cherry-pick <commit-hash-nummer> --> Übertragung nützlicher Änderungen aus einem Feature-Branch der gelöst werden soll.





