git init   -->wird im aktuellen Verzeichniss ein neues Repository angelegt

git add <Dateiname>  -->wird eine Datei in den Commit aufgenomen ( erst in git Stange)

git add .  --> alle geänderten Dateien werden in den Stange bereich aufgenommen. 

git commit -m "hier kommt ein Kommentar"  -->werden die Dateien in das Repository lokal aufgenommen.

git commit --all  --> Mit diesem Befehl kann man sich den add Befehl sparen alle Änderungen werden direkt ins Repository übernommen

git status   -->werden alle Aenderungen seit dem letzten commit angezeigt.(Workspace und Stage-Bereich)

git status --short  --> eine Verkleinerte Anzeige.

git log  --> History vom Repository lokal, wird angezeigt.

git log -3  --> werden nur die letzten 3 Einträge angezeigt. 

git .gitignore  --> Datei .gitignor im Root Verzeichnis anlegen. In die Datei die Dateinamen der zu ignorierenden Dateien eintragen

git rm <Dateiname> --> Mit dem rm Befehl müssen in git die gelöschten Dateien bekannt gemacht werden.

git push -u origin master  --> Änderungen vom lokalen Repository ins remote Repository aufnehmen.

git pull  --> Änderungen vom remote Repository auf das lokale Repository herunter ziehen.

cat .git/config  --> Konfiguration von Git anzeigen.

git reset <Dateiname>  --> Unstage Dateien, die noch nicht commitet sind.

git reset HAED . --> alle Dateien im Stage Bereich werden zurück genommen.

git diff <hashNr erste 7 zeichen> <hashNr erste 7 zeichen> --> Vergleicht die zwei Dateien auf unterschiede.

git branch <Branch Name>  --> Neuen Branch anlegen.

git brauch <Branch Name> <hashNr> --> Brach zweigt von der Angegebenen hashNr ab.

git branch -d <Branch Name> --> Abgeschlossen Branch löschen.

git branch -D <Branch Name> --> Offenen Branch löschen.

git branch <Branch Name> <HashNr> --> Kann ein gelöschter Branch wieder hergestellt werden.

git reflog --> Kann die HashNr. aus dem lokalen reflog ausgelesen werden.

git merge <Branch Name> --> Einen Banch wieder mit Master zusammen führen. Dazu muss man im Master Branch sein.

git checkout <Banch Name> -->erzeugt einen neuen Brach, wechselt aber nicht dorthin.

git checkout -b <Brach Name> -->erzeugt einen neuen Brach und wechselt auch den Zweig.

git stash --> Mit diesem Befehl können Änderungen vom Workspace zwischen gespeicher werden ohne zu adden. 

git stash list --> anschauen was zwischen gespeichert ist.

git stash pop --> Änderungen uas zwischen Speicher zurück hohlen.








